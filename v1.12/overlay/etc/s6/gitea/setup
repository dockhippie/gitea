#!/bin/bash
source /usr/bin/entrypoint

echo "> deleting temp directories"
rm -rf \
  ${GITEA_REPO_LOCAL_LOCAL_COPY_PATH} \
  ${GITEA_REPO_LOCAL_LOCAL_WIKI_PATH} \
  ${GITEA_REPO_UPLOAD_TEMP_PATH} \
  ${GITEA_SERVER_SSH_KEY_TEST_PATH}

echo "> creating temp directories"
mkdir -p \
  ${GITEA_REPO_LOCAL_LOCAL_COPY_PATH} \
  ${GITEA_REPO_LOCAL_LOCAL_WIKI_PATH} \
  ${GITEA_REPO_UPLOAD_TEMP_PATH} \
  ${GITEA_SERVER_SSH_KEY_TEST_PATH}

if [ ! -d ${GITEA_CONFIG_PATH} ]
then
  echo "> creating config directory"
  mkdir -p ${GITEA_CONFIG_PATH}
fi

if [ ! -d ${GITEA_LOG_ROOT_PATH} ]
then
  echo "> creating log directory"
  mkdir -p ${GITEA_LOG_ROOT_PATH}
fi

if [ ! -d ${GITEA_BASE_PATH} ]
then
  echo "> creating base directory"
  mkdir -p ${GITEA_BASE_PATH}
fi

if [ ! -d ${GITEA_SERVER_SSH_ROOT_PATH} ]
then
  echo "> creating ssh directory"
  mkdir -p ${GITEA_SERVER_SSH_ROOT_PATH}
fi

if [ ! -d ${GITEA_SERVER_APP_DATA_PATH} ]
then
  echo "> creating data directory"
  mkdir -p ${GITEA_SERVER_APP_DATA_PATH}
fi

if [ ! -d ${GITEA_SESSION_PATH} ]
then
  echo "> creating session directory"
  mkdir -p ${GITEA_SESSION_PATH}
fi

if [ ! -d ${GITEA_REPO_ROOT} ]
then
  echo "> creating repo directory"
  mkdir -p ${GITEA_REPO_ROOT}
fi

if [ ! -d ${GITEA_SERVER_LFS_CONTENT_PATH} ]
then
  echo "> creating lfs directory"
  mkdir -p ${GITEA_SERVER_LFS_CONTENT_PATH}
fi

if [ ! -d ${GITEA_PICTURE_AVATAR_UPLOAD_PATH} ]
then
  echo "> creating avatar directory"
  mkdir -p ${GITEA_PICTURE_AVATAR_UPLOAD_PATH}
fi

if [ ! -d ${GITEA_ATTACHMENT_PATH} ]
then
  echo "> creating attachment directory"
  mkdir -p ${GITEA_ATTACHMENT_PATH}
fi

if [ ! -d ${GITEA_INDEXER_PATH} ]
then
  echo "> creating indexer directory"
  mkdir -p ${GITEA_INDEXER_PATH}
fi

if [ ! -d ${GITEA_SERVER_PPROF_DATA_PATH} ]
then
  echo "> creating pprof directory"
  mkdir -p ${GITEA_SERVER_PPROF_DATA_PATH}
fi

if [ ! -d ${GITEA_CUSTOM} ]
then
  echo "> creating custom directory"
  mkdir -p ${GITEA_CUSTOM}
fi

if [[ ${GITEA_SKIP_CHOWN} == "true" ]]
then
  echo "> skipping perm fix"
else
  echo "> fixing temp perms"
  for DIR in ${GITEA_REPO_LOCAL_LOCAL_COPY_PATH} ${GITEA_REPO_LOCAL_LOCAL_WIKI_PATH} ${GITEA_REPO_UPLOAD_TEMP_PATH} ${GITEA_SERVER_SSH_KEY_TEST_PATH}
  do
    find ${DIR} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  done

  echo "> fixing config perms"
  find ${GITEA_CONFIG_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git

  echo "> fixing log perms"
  find ${GITEA_LOG_ROOT_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git

  echo "> fixing custom perms"
  find ${GITEA_CUSTOM} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git

  echo "> fixing base perms"
  find ${GITEA_BASE_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git

  if [[ ! ${GITEA_SERVER_SSH_ROOT_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing ssh perms"
    find ${GITEA_SERVER_SSH_ROOT_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_SERVER_APP_DATA_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing data perms"
    find ${GITEA_SERVER_APP_DATA_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_SESSION_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing session perms"
    find ${GITEA_SESSION_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_REPO_ROOT} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing repo perms"
    find ${GITEA_REPO_ROOT} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_SERVER_LFS_CONTENT_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing lfs perms"
    find ${GITEA_SERVER_LFS_CONTENT_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_PICTURE_AVATAR_UPLOAD_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing avatar perms"
    find ${GITEA_PICTURE_AVATAR_UPLOAD_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_ATTACHMENT_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing attachment perms"
    find ${GITEA_ATTACHMENT_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_INDEXER_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing indexer perms"
    find ${GITEA_INDEXER_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi

  if [[ ! ${GITEA_SERVER_PPROF_DATA_PATH} =~ ^${GITEA_BASE_PATH} ]]
  then
    echo "> fixing pprof perms"
    find ${GITEA_SERVER_PPROF_DATA_PATH} \( \! -user git -o \! -group git \) -print0 | xargs -r -0 chown git:git
  fi
fi

case "${GITEA_DATABASE_TYPE}" in
  "mysql")
    if ! grep -q ":" <<<${GITEA_DATABASE_HOST}
    then
      GITEA_DATABASE_HOST=${GITEA_DATABASE_HOST}:3306
    fi

    echo "> waiting for mysql db"
    wait-for-it -t 60 ${GITEA_DATABASE_HOST}

    if [[ $? -ne 0 && "${GITEA_DATABASE_WAIT_FOR_FAIL}" == "true" ]]
    then
      echo "> database didn't come up"
      /bin/s6-svscanctl -t /etc/s6
      exit 1
    fi
    ;;
  "postgres")
    if ! grep -q ":" <<<${GITEA_DATABASE_HOST}
    then
      GITEA_DATABASE_HOST=${GITEA_DATABASE_HOST}:5432
    fi

    echo "> waiting for postgres db"
    wait-for-it -t 60 ${GITEA_DATABASE_HOST}

    if [[ $? -ne 0 && "${GITEA_DATABASE_WAIT_FOR_FAIL}" == "true" ]]
    then
      echo "> database didn't come up"
      /bin/s6-svscanctl -t /etc/s6
      exit 1
    fi
    ;;
esac

case "${GITEA_CACHE_ADAPTER}" in
  "memcache")
    if ! grep -q ":" <<<${GITEA_CACHE_MEMCACHE_HOST}
    then
      GITEA_CACHE_MEMCACHE_HOST=${GITEA_CACHE_MEMCACHE_HOST}:11211
    fi

    echo "> waiting for memcache cache"
    wait-for-it -t 60 ${GITEA_CACHE_MEMCACHE_HOST}

    if [[ $? -ne 0 && "${GITEA_CACHE_WAIT_FOR_FAIL}" == "true" ]]
    then
      echo "> cache didn't come up"
      /bin/s6-svscanctl -t /etc/s6
      exit 1
    fi
    ;;

  "redis")
    if ! grep -q ":" <<<${GITEA_CACHE_REDIS_HOST}
    then
      GITEA_CACHE_REDIS_HOST=${GITEA_CACHE_REDIS_HOST}:6379
    fi

    echo "> waiting for redis cache"
    wait-for-it -t 60 ${GITEA_CACHE_REDIS_HOST}

    if [[ $? -ne 0 && "${GITEA_CACHE_WAIT_FOR_FAIL}" == "true" ]]
    then
      echo "> cache didn't come up"
      /bin/s6-svscanctl -t /etc/s6
      exit 1
    fi
    ;;
esac

case "${GITEA_SESSION_PROVIDER}" in
  "redis")
    if ! grep -q ":" <<<${GITEA_SESSION_REDIS_HOST}
    then
      GITEA_SESSION_REDIS_HOST=${GITEA_SESSION_REDIS_HOST}:6379
    fi

    echo "> waiting for redis session"
    wait-for-it -t 60 ${GITEA_SESSION_REDIS_HOST}

    if [[ $? -ne 0 && "${GITEA_SESSION_WAIT_FOR_FAIL}" == "true" ]]
    then
      echo "> session didn't come up"
      /bin/s6-svscanctl -t /etc/s6
      exit 1
    fi
    ;;
esac

if [ -z "${GITEA_SECURITY_INTERNAL_TOKEN}" ]
then
  if [ -f ${GITEA_SERVER_APP_DATA_PATH}/internal ]
  then
    GITEA_SECURITY_INTERNAL_TOKEN=$(cat ${GITEA_SERVER_APP_DATA_PATH}/internal | head -n1)
  else
    echo "> generating internal token"
    GITEA_SECURITY_INTERNAL_TOKEN=$(gitea generate secret INTERNAL_TOKEN)
    echo "${GITEA_SECURITY_INTERNAL_TOKEN}" >| ${GITEA_SERVER_APP_DATA_PATH}/internal
  fi
fi

if [ -z "${GITEA_SECURITY_SECRET_KEY}" ]
then
  if [ -f ${GITEA_SERVER_APP_DATA_PATH}/secret ]
  then
    GITEA_SECURITY_SECRET_KEY=$(cat ${GITEA_SERVER_APP_DATA_PATH}/secret | head -n1)
  else
    echo "> generating secret key"
    GITEA_SECURITY_SECRET_KEY=$(gitea generate secret SECRET_KEY)
    echo "${GITEA_SECURITY_SECRET_KEY}" >| ${GITEA_SERVER_APP_DATA_PATH}/secret
  fi
fi

if [ "${GITEA_SERVER_LFS_START_SERVER}" == "true" -a -z "${GITEA_SERVER_LFS_JWT_SECRET}" ]
then
  if [ -f ${GITEA_SERVER_APP_DATA_PATH}/lfs ]
  then
    GITEA_SERVER_LFS_JWT_SECRET=$(cat ${GITEA_SERVER_APP_DATA_PATH}/lfs | head -n1)
  else
    echo "> generating lfs jwt"
    GITEA_SERVER_LFS_JWT_SECRET=$(gitea generate secret LFS_JWT_SECRET)
    echo "${GITEA_SERVER_LFS_JWT_SECRET}" >| ${GITEA_SERVER_APP_DATA_PATH}/lfs
  fi
fi

if [ "${GITEA_OAUTH2_ENABLED}" == "true" -a -z "${GITEA_OAUTH2_JWT_SECRET}" ]
then
  if [ -f ${GITEA_SERVER_APP_DATA_PATH}/oauth2 ]
  then
    GITEA_OAUTH2_JWT_SECRET=$(cat ${GITEA_SERVER_APP_DATA_PATH}/oauth2 | head -n1)
  else
    echo "> generating oauth2 jwt"
    GITEA_OAUTH2_JWT_SECRET=$(gitea generate secret LFS_JWT_SECRET)
    echo "${GITEA_OAUTH2_JWT_SECRET}" >| ${GITEA_SERVER_APP_DATA_PATH}/oauth2
  fi
fi

if [ -n "${GITEA_MAILER_CERT_FILE}" ]
then
  if [ ! -f "${GITEA_MAILER_CERT_FILE}" ]
  then
    echo -e "${GITEA_MAILER_CERT_FILE}" >| /tmp/mail.pem
    GITEA_MAILER_CERT_FILE="/tmp/mail.pem"
  fi
fi

if [ -n "${GITEA_MAILER_KEY_FILE}" ]
then
  if [ ! -f "${GITEA_MAILER_KEY_FILE}" ]
  then
    echo -e "${GITEA_MAILER_KEY_FILE}" >| /tmp/mail.key
    GITEA_MAILER_KEY_FILE="/tmp/mail.key"
  fi
fi

if [ -n "${GITEA_SERVER_CERT_FILE}" ]
then
  if [ ! -f "${GITEA_SERVER_CERT_FILE}" ]
  then
    echo -e "${GITEA_SERVER_CERT_FILE}" >| /tmp/gitea.key
    GITEA_SERVER_CERT_FILE="/tmp/gitea.key"
  fi
fi

if [ -n "${GITEA_SERVER_KEY_FILE}" ]
then
  if [ ! -f "${GITEA_SERVER_KEY_FILE}" ]
  then
    echo -e "${GITEA_SERVER_KEY_FILE}" >| /tmp/gitea.key
    GITEA_SERVER_KEY_FILE="/tmp/gitea.key"
  fi
fi

echo "> writing gitea config"
/usr/bin/gomplate -V \
  -o ${GITEA_CONFIG_FILE} \
  -f ${GITEA_CONFIG_TEMPLATE}

if [[ $? -ne 0 ]]
then
  echo "> writing config failed!"
  /bin/s6-svscanctl -t /etc/s6
  exit 1
fi
